/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-04-05 02:50:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.attribute;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class attrScopeProcess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	/* POST 방식 요청인 경우 setCharacterEncoding("UTF-8")을 호출해
	 * 웹 브라우저의 인코딩 방식과 동일한 문자 셋인 UTF-8을 지정해야 
	 * 한글 데이터와 같은 유니코드 문자를 깨지지 않게 처리할 수 있다.
	 * 
	 * getParameter() 메서드가 호출되기 전에 setCharacterEncoding("UTF-8")
	 * 메서드를 먼저 호출해 request 영역의 문자 셋을 먼저 처리해야 한다.  
	 */
	request.setCharacterEncoding("utf-8");
	
	// request 내장객체를 이용해 요청 파라미터를 읽어온다. 
	String id = request.getParameter("id");
	String name = request.getParameter("name");
	
	/* 데이터를 저장할 수 있는 속성을 제공하는 4가지 내장객체에 id를 저장한다.
	 * 속성을 제공하는 내장객체에 저장할 수 있는 데이터는 기본형과 참조형 모두 가능하다.
	 * 아래와 같이 setAttribute() 메서드를 이용해 속성에 데이터를 저장할 수 있고
	 * getAttribute() 메서드와 EL을 이용해 속성의 데이터를 읽어 올 수 있다.
	 **/
	 
	/* pageContext 내장객체의 속성은 한 번의 요청을 처리하는 같은 JSP 페이지 내에서
	 * 데이터를 공유하기 위해서 사용되며 주로 같은 JSP 내에서 스크립틀릿과 
	 * EL(Expression Language) 간의 데이터를 교환할 때 사용된다.
	 **/
	pageContext.setAttribute("id", id);
	
	/* request 내장객체의 속성은 한 번의 요청을 처리하는 서블릿과 JSP 페이지 간에
	 * 데이터를 공유하기 위해 사용되며 RequestDispatcher나 pageContext 객체의
	 * forward() 메소드를 이용해 요청 제어를 다른 페이지로 넘길 때 사용한다.
	 * forward 되는 JSP 페이지의 스크립틀릿이나 표현식에서 getAttribute() 메소드로
	 * 속성의 데이터를 읽어 올 수 있으며 EL을 이용해도 속성의 데이터를 읽어 올 수 있다.
	 **/  
	request.setAttribute("id", id);
	
	/* session은 하나의 브라우저 접속(한 명의 사용자 접속을 의미하며 이를 세션이라고 함) 
	 * 안에서 유효한데 주로 한 사용자(같은 세션)와 관련된 정보(로그인 정보, 장바구니 등등)를
	 * 여러 JSP 페이지(웹 컴포넌트)가 공유하기 위해서 사용한다.
	 **/
	session.setAttribute("id", id);
	
	/* applicaton 내장객체는 하나의 웹 애플리케이션 정보를 저장하고 관리하기 위해
	 * 사용하는 객체로 ServletContext 타입이다. application 내장객체는 하나의
	 * 웹 애플리케이션 안에서 유효하며 웹 애플리케이션을 사용하는 모든 사용자와 관련해 
	 * 파일을 업로드 하는 서버내의 폴더 정보나 웹 애플리케이션의 설정정보 등의 필요한 
	 * 정보를 웹 컴포넌트(JSP, Servlet) 간의 공유하기 위해 사용되며 주로 서버와 
	 * 웹 애플리케이션 정보에 접근할 수 있는 메서드를 제공하고 있다.
	 **/	
	application.setAttribute("id", id);
		
	/* pageContext 내장객체를 이용해 다른 JSP 페이지로 포워딩 한다. 
	 **/
	 // pageContext.forward("attrScopeResult.jsp");

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>attrScopeProcess.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>attrScopeProcess.jsp</h2>\r\n");
      out.write("	");
      out.write("		\r\n");
      out.write("	page : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageScope.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br/>\r\n");
      out.write("	request : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ requestScope.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br/>\r\n");
      out.write("	session : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ sessionScope.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br/>\r\n");
      out.write("	application : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ applicationScope.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br/><br/>\r\n");
      out.write("	<a href=\"attrScopeResult.jsp\">attrScopeResult.jsp</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
