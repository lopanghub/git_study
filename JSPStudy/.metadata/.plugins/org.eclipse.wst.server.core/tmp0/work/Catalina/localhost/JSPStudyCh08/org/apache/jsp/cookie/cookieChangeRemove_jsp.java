/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-04-15 08:14:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cookie;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.*;

public final class cookieChangeRemove_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
	
	// request 내장 객체로 부터 모든 쿠키를 배열로 얻어온다.
	Cookie[] cookies = request.getCookies();
	
	// 쿠키 존재하면 반복문 안에서 쿠키에 접근한다.
	if(cookies != null) {
		
		for(Cookie c : cookies) {
				
			String name = c.getName();
			
			// id라는 쿠키 이름이 존재하면 쿠키의 값을 변경한다.
			if(name.equals("id")) {
				
				/* 기존에 존재하는 쿠키 이름으로 새로운 쿠키 값을 지정하여 쿠키를
				 * 생성하고 쿠키의 유효기간을 5분으로 설정한 후 response 내장 객체에
				 * 새로 생성한 쿠키를 추가한다. 만약 이미 기존에 존재하는 쿠키 이름으로
				 * 쿠키를 추가하게 되면 같은 이름의 쿠키가 추가로 만들어 진다.
				 **/  
				Cookie cookie = new Cookie(name, "cookie");
				cookie.setMaxAge(60*5);
				
				/* 브라우저는 웹 서버로 요청을 보낼 때 기본적으로 그 웹 서버(도메인)에
				 * 속하는 모든 쿠키를 함께 보내는데 아래와 같이 setPath()를 통해서 새로
				 * 생성한 쿠키에 경로를 지정하면 이 경로로 요청할 때만 쿠키를 전송한다. 
				 * 다시 말해 새로 생성한 쿠키에 아래와 같이 경로를 지정하면 웹 브라우저는 
				 * http://localhost:8080/JSPStudyCh08/cookie/ 로 요청을 할 때만
				 * id라는 이름을 가진 쿠키를 웹 서버로 같이 전송한다.
				 **/
				cookie.setPath("/JSPStudyCh08/cookie/");
				response.addCookie(cookie);
			
			// name이라는 쿠키 이름이 존재하면 쿠키를 삭제한다.	
			} else if(name.equals("name")) {				
				
				/* 쿠키의 유효기간을 설정하는 setMaxAge() 메서드를 호출하면서
				 * 시간을 0으로 지정하면 쿠키의 유효기간이 0초가 되므로 이런 쿠키를
				 * 받은 웹 브라우저는 같은 이름의 쿠키를 사용자 컴퓨터에서 삭제한다.
				 **/
				c.setMaxAge(0);
				response.addCookie(c);
			}
		}
	}

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>쿠키 변경하고 삭제하기</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("쿠키 변경과 삭제가 완료됨<br/>\r\n");
      out.write("<a href=\"cookieView.jsp\">/JSPStudyCh07/cookie/로 쿠키 확인하기</a><br/><br/>\r\n");
      out.write("<a href=\"../cookieinfo/cookieView.jsp\" >/JSPStudyCh07/cookieInfo/로 쿠키 확인하기</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
